name: Release CI

on:
  push:
    tags: [ "v*" ]

jobs:
  build:
    name: build
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: apk
            arch: all_arm64
            module: app
            task: assembleChinaRelease
            params: -PabiFilters=arm64-v8a -Pbuildkonfig.flavor=release

          - os: ubuntu-latest
            target: apk
            arch: all_armv7a
            module: app
            task: assembleChinaRelease
            params: -PabiFilters=armeabi-v7a -Pbuildkonfig.flavor=release

          - os: ubuntu-latest
            target: aab
            arch: all
            module: app
            task: bundleGoogleRelease
            params: -Pbuildkonfig.flavor=release

          - os: macos-13
            target: dmg
            arch: x86_64
            module: desktopApp
            task: packageReleaseDmg
            params: -PdeviceType=2 -Pbuildkonfig.flavor=release

          - os: macos-14
            target: dmg
            arch: arm64
            module: desktopApp
            task: packageReleaseDmg
            params: -PdeviceType=1 -Pbuildkonfig.flavor=release

          - os: windows-latest
            target: exe
            arch: x86_64
            module: desktopApp
            task: packageReleaseExe
            params: -PdeviceType=4 -Pbuildkonfig.flavor=release
#
#          - os: ubuntu-latest
#            target: deb
#            arch: x86_64
#            module: desktopApp
#            task: packageReleaseDeb
#            params: -PdeviceType=3

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: Caij/pure-music
          ref: ${{github.ref_name}}
          token: ${{secrets.GLOBAL_GITHUB_TOKEN}}

      - name: set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build
        run: |
          ./gradlew clean
          ./gradlew ${{ matrix.module }}:${{ matrix.task }} ${{ matrix.params }}

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts_${{ matrix.arch }}_${{ matrix.target }}_${{ github.ref_name }}
          if-no-files-found: error
          path: |
            ${{github.workspace}}/desktopApp/build/compose/binaries/main-release/deb/*.deb
            ${{github.workspace}}/desktopApp/build/compose/binaries/main-release/exe/*.exe
            ${{github.workspace}}/desktopApp/build/compose/binaries/main-release/dmg/*.dmg
            ${{github.workspace}}/app/build/outputs/bundle/googleRelease/app-google-release.aab
            ${{github.workspace}}/app/build/outputs/apk/china/release/app-china-release.apk 

      - name: Upload mapping 1
        if: matrix.target == 'apk' && matrix.arch == 'all_arm64'
        run: |
          . ${{github.workspace}}/version.properties
          echo $showVersionName
          cat ${{github.workspace}}/version.properties
          gzip -c ${{github.workspace}}/app/build/outputs/mapping/chinaRelease/mapping.txt > ${{github.workspace}}/app/build/outputs/mapping/chinaRelease/mapping.txt.gz
          curl -F "chat_id=-1002062702442" -F "caption=$showVersionName" -F document=@${{github.workspace}}/app/build/outputs/mapping/chinaRelease/mapping.txt.gz -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument"


  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: Caij/pure-music
          ref: ${{github.ref_name}}
          token: ${{secrets.GLOBAL_GITHUB_TOKEN}}

      - name: set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Query version number
        run: |
          . ${{github.workspace}}/version.properties
          echo $versionName
          lastVersionName=$versionName
          echo $lastVersionName
          echo "version=$lastVersionName" >> $GITHUB_ENV
          cat ${{github.workspace}}/version.properties

      - name: Download x86_64 dmg artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_x86_64_dmg_${{ github.ref_name }}
          path: artifacts/x86_64_dmg_${{ github.ref_name }}

      - name: Download x86_64 exe artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_x86_64_exe_${{ github.ref_name }}
          path: artifacts/x86_64_exe_${{ github.ref_name }}

#      - name: Download x86_64 deb artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: artifacts_x86_64_deb_${{ github.ref_name }}
#          path: artifacts/x86_64_deb_${{ github.ref_name }}

      - name: Download arm64 dmg artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_arm64_dmg_${{ github.ref_name }}
          path: artifacts/arm64_dmg_${{ github.ref_name }}

      - name: Download arm64 apk artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_all_arm64_apk_${{ github.ref_name }}
          path: artifacts/all_arm64_apk_${{ github.ref_name }}

      - name: Download armv7a apk artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_all_armv7a_apk_${{ github.ref_name }}
          path: artifacts/all_armv7a_apk_${{ github.ref_name }}

      - name: Download all aab artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_all_aab_${{ github.ref_name }}
          path: artifacts/all_aab_${{ github.ref_name }}

      - name: Rename pc artifacts
        run: |
          mv "artifacts/x86_64_dmg_${{ github.ref_name }}/desktopApp/build/compose/binaries/main-release/dmg/Cotton Music-${{ env.version }}.dmg" "artifacts/CottonMusic_${{ github.ref_name }}_mac_cpu_inter.dmg"
          mv "artifacts/arm64_dmg_${{ github.ref_name }}/desktopApp/build/compose/binaries/main-release/dmg/Cotton Music-${{ env.version }}.dmg" "artifacts/CottonMusic_${{ github.ref_name }}_mac_cpu_apple.dmg"
          mv "artifacts/x86_64_exe_${{ github.ref_name }}/desktopApp/build/compose/binaries/main-release/exe/PureMusic-${{ env.version }}.exe" "artifacts/CottonMusic_${{ github.ref_name }}_windows_x86_64.exe"

      - name: Build channel apk
        run: |
          mkdir -p "${{github.workspace}}/app/arm64/channel"
          mv "artifacts/all_arm64_apk_${{ github.ref_name }}/app/build/outputs/apk/china/release/app-china-release.apk" "${{github.workspace}}/app/arm64/channel/CottonMusic_${{ github.ref_name }}.apk"
          java -jar ${{github.workspace}}/app/VasDolly.jar put -c "github,telegram,server,openlist" "${{github.workspace}}/app/arm64/channel/CottonMusic_${{ github.ref_name }}.apk" ${{github.workspace}}/app/arm64/channel
          mv "${{github.workspace}}/app/arm64/channel/github-CottonMusic_${{ github.ref_name }}.apk" "artifacts/CottonMusic_${{ github.ref_name }}_arm64_android.apk"
          
          mkdir -p "${{github.workspace}}/app/armv7a/channel"
          mv "artifacts/all_armv7a_apk_${{ github.ref_name }}/app/build/outputs/apk/china/release/app-china-release.apk" "${{github.workspace}}/app/armv7a/channel/CottonMusic_${{ github.ref_name }}.apk"
          java -jar ${{github.workspace}}/app/VasDolly.jar put -c "github,telegram,server,openlist" "${{github.workspace}}/app/armv7a/channel/CottonMusic_${{ github.ref_name }}.apk" ${{github.workspace}}/app/armv7a/channel
          mv "${{github.workspace}}/app/armv7a/channel/github-CottonMusic_${{ github.ref_name }}.apk" "artifacts/CottonMusic_${{ github.ref_name }}_armv7a_android.apk"

      - name: Create Release
        id: create_remote_release
        uses: softprops/action-gh-release@v1
        env:
          PRERELEASE: ${{ contains(github.ref_name, 'beta') ||  contains(github.ref_name, 'rc')}}
        with:
          tag_name: ${{github.ref_name}}
          name: ${{github.ref_name}}
          body_path: ${{ github.workspace }}/CHANGELOG.txt
          files: ./artifacts/**/*
          prerelease: ${{env.PRERELEASE}}

      - name: Read CHANGELOG
        id: read_changelog_file
        uses: andstor/file-reader-action@v1
        with:
          path: ${{ github.workspace }}/CHANGELOG.txt

      - name: Read CHANGELOG
        id: read_footer_file
        uses: andstor/file-reader-action@v1
        with:
          path: ${{ github.workspace }}/Footer.txt

      - name: send tg message
        run: |
          mv "${{github.workspace}}/app/arm64/channel/telegram-CottonMusic_${{ github.ref_name }}.apk" "${{github.workspace}}/app/arm64/channel/telegram-CottonMusic_${{ github.ref_name }}_arm64.apk"
          curl -F "chat_id=-1001816793644" -F "caption=${{steps.read_changelog_file.outputs.contents}}${{steps.read_footer_file.outputs.contents}}${{steps.create_remote_release.outputs.url}}" -F document=@${{github.workspace}}/app/arm64/channel/telegram-CottonMusic_${{ github.ref_name }}_arm64.apk -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument"

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts_upload_apk
          if-no-files-found: error
          path: |
            ${{github.workspace}}/app/arm64/channel/openlist-CottonMusic_${{ github.ref_name }}.apk
            ${{github.workspace}}/app/armv7a/channel/openlist-CottonMusic_${{ github.ref_name }}.apk
            ${{github.workspace}}/app/arm64/channel/server-CottonMusic_${{ github.ref_name }}.apk
            ${{github.workspace}}/app/armv7a/channel/server-CottonMusic_${{ github.ref_name }}.apk

  upload_server_apk32:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download armv7a apk artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_upload_apk
          path: artifacts/artifacts_upload_apk
      - name: cd to path
        run: |
          ls ${{github.workspace}}/artifacts/artifacts_upload_apk/armv7a/channel/
          mv "${{github.workspace}}/artifacts/artifacts_upload_apk/armv7a/channel/server-CottonMusic_${{ github.ref_name }}.apk" "${{github.workspace}}/CottonMusic_${{ github.ref_name }}_armv7a.apk"
      - name: Deploy to Server
        uses: appleboy/scp-action@v1
        with:
          key: ${{ secrets.PRIVATE_KEY }}
          source: CottonMusic_${{ github.ref_name }}_armv7a.apk
          host: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          target: /www/wwwroot/mirrors.musiccotton.com/files/music/${{ github.ref_name }}/

  upload_server_apk64:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download armv7a apk artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts_upload_apk
          path: artifacts/artifacts_upload_apk
      - name: cd to path
        run: |
          ls ${{github.workspace}}/artifacts/artifacts_upload_apk/arm64/channel/
          mv "${{github.workspace}}/artifacts/artifacts_upload_apk/arm64/channel/server-CottonMusic_${{ github.ref_name }}.apk" "${{github.workspace}}/CottonMusic_${{ github.ref_name }}_arm64.apk"
      - name: Deploy to Server
        uses: appleboy/scp-action@v1
        with:
          key: ${{ secrets.PRIVATE_KEY }}
          source: CottonMusic_${{ github.ref_name }}_arm64.apk
          host: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          target: /www/wwwroot/mirrors.musiccotton.com/files/music/${{ github.ref_name }}/

  release_app_server:
    needs: [upload_server_apk64,upload_server_apk32]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: Caij/pure-music
          ref: ${{github.ref_name}}
          token: ${{secrets.GLOBAL_GITHUB_TOKEN}}
      - name: Read CHANGELOG
        id: read_changelog_file
        uses: andstor/file-reader-action@v1
        with:
          path: ${{ github.workspace }}/CHANGELOG.txt
      - name: release app server
        if: ${{ !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc') }}
        run: |
          . ${{github.workspace}}/version.properties
          releaseVersionCode=$versionCode
          cat ${{github.workspace}}/version.properties
          echo $releaseVersionCode
          if echo "$showVersionName" | grep -qi "beta"; then
            releaseTypeInt=1
          elif echo "$showVersionName" | grep -qi "rc"; then
            releaseTypeInt=2
          else
            releaseTypeInt=0
          fi
          curl -X POST '${{ secrets.ReleaseApiUrl }}' \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "versionCode=$releaseVersionCode" \
            -d "versionName=$showVersionName" \
            -d "alterVersion=$sAlterVersion" \
            -d "forceVersion=$sForceVersion" \
            -d "releaseType=$releaseTypeInt" \
            -d "releaseToken=${{ secrets.releaseToken }}" \
            -d "webUrl=https://mirrors.musiccotton.com/music/apk/${{ github.ref_name }}" \
            -d "updateLog=${{steps.read_changelog_file.outputs.contents}}"